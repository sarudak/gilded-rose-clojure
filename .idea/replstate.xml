<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1427994743302">{:repl-history {:ide [], :local [&quot;(+ 2 3)&quot; &quot;(gilded-rose.core/item \&quot;Sulfuras\&quot; 10 15)&quot; &quot;(item \&quot;Sulfuras\&quot; 10 15)&quot; &quot;(def an-item (item \&quot;FredBob\&quot; -1 13))&quot; &quot;(update-quality [item])&quot; &quot;(update-quality [an-item])&quot; &quot;(macro-expand '(defn something [a b] (+ a b)))&quot; &quot;(macroexpand '(defn something [a b] (+ a b)))&quot; &quot;(fact \&quot;Given an unexpired ordinary item\&quot;\n      (let [inventory [(item \&quot;Normal thing\&quot; 10 15)]\n            result (update-quality inventory)\n            updated-item (first result)]\n        (fact \&quot;The item has the normal keys\&quot;\n              updated-item =&gt; (just {:name anything :sell-in anything :quality anything}))\n        (fact \&quot;The sell-in date is decremented\&quot;\n              (:sell-in updated-item) =&gt; 9)\n        (fact \&quot;The quality is decremented by 1\&quot;\n              (:quality updated-item) =&gt; 14)))&quot; &quot;(fact \&quot;Given an expired ordinary item\&quot;\n      (let [inventory [(item \&quot;Normal thing\&quot; -1 15)]\n            result (update-quality inventory)\n            updated-item (first result)]\n        (fact \&quot;The sell-in date is decremented\&quot;\n              (:sell-in updated-item) =&gt; -2)\n        (fact \&quot;The quality is decremented by 2\&quot;\n              (:quality updated-item) =&gt; 13)))&quot; &quot;(fact \&quot;Given an expired ordinary item of no quality\&quot;\n      (let [inventory [(item \&quot;Normal thing\&quot; -1 0)]\n            result (update-quality inventory)\n            updated-item (first result)]\n        (fact \&quot;The sell-in date is decremented\&quot;\n              (:sell-in updated-item) =&gt; -2)\n        (fact \&quot;The quality is still 0\&quot;\n              (:quality updated-item) =&gt; 0)))&quot; &quot;(fact \&quot;Given an Aged brie item\&quot;\n      (let [inventory [(item \&quot;Aged Brie\&quot; 15 10)]\n            result (update-quality inventory)\n            updated-item (first result)]\n        (fact \&quot;The sell-in date is decremented\&quot;\n              (:sell-in updated-item) =&gt; 14)\n        (fact \&quot;The quality increases\&quot;\n              (:quality updated-item) =&gt; 11)))&quot; &quot;(fact \&quot;Given Sulfuras\&quot;\n      (let [inventory [(item \&quot;Sulfuras, Hand of Ragnaros\&quot; 10 50)]\n            result (update-quality inventory)\n            updated-item (first result)]\n        (fact \&quot;nothing changes\&quot;\n              result =&gt; inventory\n              )))&quot; &quot;(fact \&quot;Given Sulfuras\&quot;\n      (let [inventory [(item \&quot;Sulfuras, Hand of Ragnaros\&quot; 10 15)]\n            result (update-quality inventory)\n            updated-item (first result)]\n        (fact \&quot;nothing changes\&quot;\n              result =&gt; inventory\n              )))&quot; &quot;(fact \&quot;Given Sulfuras\&quot;\n      (let [inventory [(item \&quot;Sulfuras, Hand of Ragnaros\&quot; 10 15)]\n            result (update-quality inventory)\n            updated-item (first result)]\n        (fact \&quot;nothing changes\&quot;\n              result =&gt; inventory\n              (:quality updated-item) =&gt; 15\n              )))&quot; &quot;(fact \&quot;Given an Aged brie item\&quot;\n      (let [inventory [(item \&quot;Aged Brie\&quot; 0 0)]]\n        (let [inventory [(item \&quot;Aged Brie\&quot; 15 10)]\n              result (update-quality inventory)\n              updated-item (first result)]\n          (fact \&quot;The sell-in date is decremented\&quot;\n                (:sell-in updated-item) =&gt; 14)\n          (fact \&quot;The quality increases\&quot;\n                (:quality updated-item) =&gt; 11)))\n      )&quot; &quot;(fact \&quot;Given an Aged brie item\&quot;\n      (let [inventory [(item \&quot;Aged Brie\&quot; 0 0)]]\n        (let [inventory [(item \&quot;Aged Brie\&quot; 15 10)]\n              result (update-quality inventory)\n              updated-item (first result)]\n          (fact \&quot;The sell-in date is decremented\&quot;\n                (:sell-in updated-item) =&gt; 14)\n          (fact \&quot;The quality increases\&quot;\n                (:quality updated-item) =&gt; 11))\n        (fact \&quot;I understand immutability\&quot;\n              inventory =&gt; (item \&quot;Aged Brie\&quot; 0 0))))&quot; &quot;(fact \&quot;Given an Aged brie item\&quot;\n      (let [inventory [(item \&quot;Aged Brie\&quot; 0 0)]]\n        (let [inventory [(item \&quot;Aged Brie\&quot; 15 10)]\n              result (update-quality inventory)\n              updated-item (first result)]\n          (fact \&quot;The sell-in date is decremented\&quot;\n                (:sell-in updated-item) =&gt; 14)\n          (fact \&quot;The quality increases\&quot;\n                (:quality updated-item) =&gt; 11))\n        (fact \&quot;I understand immutability\&quot;\n              inventory =&gt; [(item \&quot;Aged Brie\&quot; 0 0)])))&quot; &quot;(fact \&quot;Given an Aged brie item at max quality\&quot;\n      (let [inventory [(item \&quot;Aged Brie\&quot; 10 50)]\n            result (update-quality inventory)\n            updated-item (first result)]\n        (fact \&quot;the quality does not increase\&quot;\n              (:quality updated-item) =&gt; 50)))&quot; &quot;(fact \&quot;Given an Aged brie item\&quot;\n        (let [\n              normal (item \&quot;Aged Brie\&quot; 15 10)\n              max-quality (item \&quot;Aged Brie\&quot; 15 50)\n              inventory [normal max-quality]\n              results (update-quality inventory)]\n          (fact \&quot;The normal item\&quot;\n                (let [normal-result (first results)]\n                  (fact \&quot;The sell-in date is decremented\&quot;\n                        (:sell-in normal-result) =&gt; 14)\n                  (fact \&quot;The quality increases\&quot;\n                        (:quality normal-result) =&gt; 11)\n                  )\n                )\n          (fact \&quot;The item at max quality\&quot;\n                (let [max-quality-result (nth results 1)])\n                  (fact \&quot;The sell-in date is decremented\&quot;\n                        (:sell-in max-quality-result) =&gt; 14)\n                  (fact \&quot;The quality does not increase\&quot;\n                        (:quality max-quality-result) =&gt; 50)\n                )))&quot; &quot;(fact \&quot;Given an Aged brie item\&quot;\n        (let [\n              normal (item \&quot;Aged Brie\&quot; 15 10)\n              max-quality (item \&quot;Aged Brie\&quot; 15 50)\n              inventory [normal max-quality]\n              results (update-quality inventory)]\n          (fact \&quot;The normal item\&quot;\n                (let [normal-result (first results)]\n                  (fact \&quot;The sell-in date is decremented\&quot;\n                        (:sell-in normal-result) =&gt; 14)\n                  (fact \&quot;The quality increases\&quot;\n                        (:quality normal-result) =&gt; 11)\n                  )\n                )\n          (fact \&quot;The item at max quality\&quot;\n                (let [max-quality-result (nth results 1)]\n                  (fact \&quot;The sell-in date is decremented\&quot;\n                        (:sell-in max-quality-result) =&gt; 14)\n                  (fact \&quot;The quality does not increase\&quot;\n                        (:quality max-quality-result) =&gt; 50))\n                )))&quot;], :remote []}}</component>
</project>